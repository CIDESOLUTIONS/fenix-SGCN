version: "3.9"

services:
  fenix_proxy:
    image: nginx:stable-alpine
    container_name: fenix_proxy_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # Certificados SSL
    depends_on:
      - fenix_backend
      - fenix_frontend
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fenix-net
    restart: always

  fenix_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    container_name: fenix_frontend_prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  fenix_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: fenix_backend_prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@fenix_db_master:5432/${POSTGRES_DB}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      DGRAPH_URL: http://fenix_dgraph:8080
      DGRAPH_GRPC_URL: fenix_dgraph:9080
      REDIS_HOST: fenix_redis
      REDIS_PORT: 6379
    ports:
      - "3001:3001"
    depends_on:
      fenix_db_master:
        condition: service_healthy
      fenix_dgraph:
        condition: service_healthy
      fenix_redis:
        condition: service_healthy
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  fenix_db_master:
    image: postgres:16-alpine
    container_name: fenix_db_master_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups  # Para backups autom√°ticos
    ports:
      - "5432:5432"
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "work_mem=16MB"

  fenix_storage:
    image: minio/minio:latest
    container_name: fenix_storage_prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    command: server /data --console-address ":9001"
    volumes:
      - minio_prod_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  fenix_dgraph:
    image: dgraph/standalone:latest
    container_name: fenix_dgraph_prod
    environment:
      - DGRAPH_ALPHA_SECURITY_WHITELIST=0.0.0.0/0
    ports:
      - "8080:8080"
      - "9080:9080"
    volumes:
      - dgraph_prod_data:/dgraph
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  fenix_redis:
    image: redis:7-alpine
    container_name: fenix_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sgcn2025}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sgcn2025}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_prod_data:
    driver: local
  minio_prod_data:
    driver: local
  dgraph_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  fenix-net:
    driver: bridge
