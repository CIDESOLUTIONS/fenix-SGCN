version: "3.9"

services:
  fenix_proxy:
    image: nginx:stable-alpine
    container_name: fenix_proxy_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fenix_backend
      - fenix_frontend
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fenix-net
    restart: always

  fenix_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    container_name: fenix_frontend_prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  fenix_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: fenix_backend_prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-fenix}:${POSTGRES_PASSWORD:-fenix2024}@fenix_db_master:5432/${POSTGRES_DB:-fenix_sgcn}?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      PORT: 3001
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@fenix-sgcn.com}
      DGRAPH_URL: http://fenix_dgraph:8080
      DGRAPH_GRPC_URL: fenix_dgraph:9080
      REDIS_HOST: fenix_redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: fenix_storage
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "3001:3001"
    depends_on:
      fenix_db_master:
        condition: service_healthy
      fenix_dgraph:
        condition: service_healthy
      fenix_redis:
        condition: service_healthy
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  fenix_db_master:
    image: postgres:17.5-alpine
    container_name: fenix_db_master_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fenix}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fenix2024}
      POSTGRES_DB: ${POSTGRES_DB:-fenix_sgcn}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - fenix_postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - fenix-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fenix} -d ${POSTGRES_DB:-fenix_sgcn}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  fenix_dgraph:
    image: dgraph/dgraph:v24.1.5
    container_name: fenix_dgraph_prod
    volumes:
      - fenix_dgraph_prod_data:/dgraph
    ports:
      - "5080:5080"
      - "6080:6080"
      - "8080:8080"
      - "9080:9080"
      - "8000:8000"
    networks:
      - fenix-net
    restart: always
    command: dgraph alpha --my=fenix_dgraph:7080 --zero=fenix_dgraph:5080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  fenix_redis:
    image: redis:8-alpine
    container_name: fenix_redis_prod
    volumes:
      - fenix_redis_prod_data:/data
    ports:
      - "6379:6379"
    networks:
      - fenix-net
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  fenix_storage:
    image: minio/minio:latest
    container_name: fenix_storage_prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - fenix_minio_prod_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - fenix-net
    restart: always
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  fenix-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  fenix_postgres_prod_data:
    driver: local
  fenix_dgraph_prod_data:
    driver: local
  fenix_redis_prod_data:
    driver: local
  fenix_minio_prod_data:
    driver: local