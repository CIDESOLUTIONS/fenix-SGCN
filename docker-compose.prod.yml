#version: "3.9"

services:
  fenix_proxy:
    image: nginx:stable-alpine
    container_name: fenix_proxy
    ports:
      - "80:80"
      
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      fenix_backend:
        condition: service_started
      fenix_frontend:
        condition: service_started
    networks:
      - fenix-net
    restart: always

  fenix_frontend:
    build:
      context: ./frontend
    container_name: fenix_frontend
    networks:
      - fenix-net
    restart: unless-stopped

  fenix_backend:
    build:
      context: ./backend
    container_name: fenix_backend
    volumes:
      - ./.env:/usr/src/app/.env:ro
    depends_on:
      fenix_db_master:
        condition: service_healthy
    networks:
      - fenix-net
    restart: unless-stopped

  fenix_db_master:
    image: postgres:16-alpine
    container_name: fenix_db_master
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    networks:
      - fenix-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  fenix_storage:
    image: minio/minio:latest
    container_name: fenix_storage
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - fenix-net
    restart: unless-stopped

volumes:
  postgres_master_data:
  minio_data:

networks:
  fenix-net:
    driver: bridge
