# ============================
# STAGE 1: Builder
# ============================
FROM node:20-alpine AS builder
WORKDIR /app

# Copiar archivos de configuración
COPY package*.json ./

# Instalar dependencias con reintentos
RUN npm install --legacy-peer-deps --no-audit || \
    npm install --legacy-peer-deps --no-audit || \
    npm install --legacy-peer-deps --no-audit

# Copiar código fuente
COPY . .

# Build argument para la URL de API
ARG NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# Compilar Next.js con output standalone
RUN npm run build

# ============================
# STAGE 2: Runner (Producción)
# ============================
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Instalar tini para manejo de señales
RUN apk add --no-cache tini curl

# Crear usuario no-root
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copiar archivos estáticos y build
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Cambiar a usuario no-root
USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });"

# Usar tini como init
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "server.js"]
