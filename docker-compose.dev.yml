# version: "3.9"

services:
  fenix_proxy:
    image: nginx:stable-alpine
    container_name: fenix_proxy
    ports:
      - "80:80"
      
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      fenix_backend:
        condition: service_started
      fenix_frontend:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "nginx -v || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fenix-net
    restart: always

  fenix_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: fenix_frontend
    working_dir: /usr/src/app
    command: npm run dev
    volumes:
      - ./frontend:/usr/src/app:cached
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"   # ðŸ‘‰ Ãºtil para debug directo sin pasar por nginx
    networks:
      - fenix-net
    restart: unless-stopped

  fenix_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: fenix_backend
    working_dir: /usr/src/app
    command: npm run start:dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@fenix_db_master:5432/${POSTGRES_DB}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001:3001"
    depends_on:
      fenix_db_master:
        condition: service_healthy
      fenix_dgraph:
        condition: service_started
    networks:
      - fenix-net
    restart: unless-stopped

  fenix_db_master:
    image: postgres:16-alpine
    container_name: fenix_db_master
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fenix-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  fenix_storage:
    image: minio/minio:latest
    container_name: fenix_storage
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - fenix-net
    restart: unless-stopped

  fenix_dgraph:
    image: dgraph/standalone:latest
    container_name: fenix_dgraph
    environment:
      - DGRAPH_ALPHA_SECURITY_WHITELIST=0.0.0.0/0
    ports:
      - "8080:8080"  # HTTP API & UI
      - "9080:9080"  # gRPC
    volumes:
      - dgraph_data:/dgraph
    networks:
      - fenix-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  fenix_redis:
    image: redis:7-alpine
    container_name: fenix_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fenix-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_master_data:
  minio_data:
  dgraph_data:
  redis_data:

networks:
  fenix-net:
    driver: bridge
