# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install ALL dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma Client
RUN npx prisma generate

# Build TypeScript
RUN npm run build

# Stage 2: Production
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production

# Install production dependencies only
COPY package*.json ./
COPY prisma ./prisma/
RUN npm ci --only=production && \
    npx prisma generate && \
    npm cache clean --force

# Copy built app from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Create entrypoint script
RUN echo '#!/bin/sh' > /app/docker-entrypoint.sh && \
    echo 'echo "ðŸ”„ Esperando a que la base de datos estÃ© lista..."' >> /app/docker-entrypoint.sh && \
    echo 'while ! nc -z fenix_db_master 5432; do sleep 1; done' >> /app/docker-entrypoint.sh && \
    echo 'echo "âœ… Base de datos lista"' >> /app/docker-entrypoint.sh && \
    echo 'echo "ðŸ”„ Ejecutando migraciones de Prisma..."' >> /app/docker-entrypoint.sh && \
    echo 'npx prisma migrate deploy' >> /app/docker-entrypoint.sh && \
    echo 'echo "âœ… Migraciones aplicadas"' >> /app/docker-entrypoint.sh && \
    echo 'echo "ðŸš€ Iniciando aplicaciÃ³n..."' >> /app/docker-entrypoint.sh && \
    echo 'exec node dist/main' >> /app/docker-entrypoint.sh && \
    chmod +x /app/docker-entrypoint.sh

# Install netcat for healthcheck
RUN apk add --no-cache netcat-openbsd

EXPOSE 3001

CMD ["/app/docker-entrypoint.sh"]
