# ============================
# STAGE 1: Builder
# ============================
FROM node:20-alpine AS builder
WORKDIR /app

# Instalar dependencias del sistema necesarias para compilación
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    libc6-compat

# Copiar archivos de configuración
COPY package*.json ./
COPY prisma ./prisma/

# Instalar TODAS las dependencias (incluidas devDependencies)
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Generar Prisma Client
RUN npx prisma generate

# Copiar código fuente
COPY . .

# Compilar TypeScript
RUN npm run build

# ============================
# STAGE 2: Producción
# ============================
FROM node:20-alpine AS production
WORKDIR /app

# Instalar dependencias de runtime
RUN apk add --no-cache \
    bash \
    curl \
    ca-certificates \
    openssl \
    libc6-compat \
    tini

# Crear usuario no-root
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copiar solo lo necesario desde builder
COPY --from=builder --chown=appuser:appgroup /app/node_modules ./node_modules
COPY --from=builder --chown=appuser:appgroup /app/dist ./dist
COPY --from=builder --chown=appuser:appgroup /app/package*.json ./
COPY --from=builder --chown=appuser:appgroup /app/prisma ./prisma

# Copiar script de inicio
COPY --chown=appuser:appgroup docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Variables de entorno
ENV NODE_ENV=production
ENV PORT=3001

# Cambiar a usuario no-root
USER appuser

EXPOSE 3001

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Usar tini como init para manejar señales correctamente
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["./docker-entrypoint.sh"]
